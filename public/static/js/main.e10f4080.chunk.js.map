{"version":3,"sources":["components/LandingPage.js","components/AllUsers.js","components/SingleUser.js","App.js","serviceWorker.js","index.js"],"names":["UserDiv","styled","div","_templateObject","LandingPage","state","users","fetchUsers","_callee","response","regenerator_default","a","wrap","_context","prev","next","Axios","get","sent","_this","setState","data","console","log","stop","this","allUsers","map","user","i","react_default","createElement","key","username","Component","AllUsers","SingleUser","cars","fetchUser","id","axios","concat","fetchCars","_callee2","_context2","userId","props","match","params","App","BrowserRouter","Switch","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mZAKA,IAAMA,QAAUC,EAAOC,IAAVC,KAIQC,6MACjBC,MAAQ,CACJC,MAAQ,MAOfC,gCAAa,SAAAC,IAAA,IAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACSC,IAAMC,IAAI,cADnB,OACRR,EADQI,EAAAK,KAEdC,EAAKC,SAAS,CAAEd,MAAOG,EAASY,OAChCC,QAAQC,IAAIJ,EAAKd,MAAMC,OAHT,wBAAAO,EAAAW,SAAAhB,EAAAiB,oNAHRA,KAAKlB,gJAUH,IAAMmB,EAAWD,KAAKpB,MAAMC,MAAMqB,IAAI,SAACC,EAAMC,GACzC,OACIC,EAAAnB,EAAAoB,cAAC/B,EAAD,CAASgC,IAAKH,GACVC,EAAAnB,EAAAoB,cAAA,UAAKH,EAAKK,aAI1B,OACIH,EAAAnB,EAAAoB,cAAA,WACID,EAAAnB,EAAAoB,cAAA,mBACDD,EAAAnB,EAAAoB,cAAA,cAAML,EAAN,aA1B8BQ,aCNpBC,mLAEb,OACIL,EAAAnB,EAAAoB,cAAA,yCAH0BG,aCCjBE,6MACjB/B,MAAQ,CACJuB,KAAM,GACNS,KAAM,MAcVC,gDAAY,SAAA9B,EAAM+B,GAAN,IAAA9B,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACOyB,IAAMvB,IAAN,cAAAwB,OAAwBF,IAD/B,OACV9B,EADUI,EAAAK,KAEhBC,EAAKC,SAAS,CAACQ,KAAMnB,EAASY,OAFd,wBAAAR,EAAAW,SAAAhB,EAAAiB,iEAKZiB,gDAAY,SAAAC,EAAMJ,GAAN,IAAA9B,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAgC,GAAA,cAAAA,EAAA9B,KAAA8B,EAAA7B,MAAA,cAAA6B,EAAA7B,KAAA,EACeyB,IAAMvB,IAAN,cAAAwB,OAAwBF,IADvC,OACF9B,EADEmC,EAAA1B,KAERC,EAAKC,SAAS,CAACiB,KAAM5B,EAASY,OAFtB,wBAAAuB,EAAApB,SAAAmB,EAAAlB,2QAfFoB,EAASpB,KAAKqB,MAAMC,MAAMC,OAAOT,YAEpBd,KAAKa,UAAUO,iBAA5BjB,kBACaH,KAAKiB,UAAUG,UAA5BR,SAGNZ,KAAKL,SAAS,CAAEQ,OAAKS,4IAcrB,IAAMT,EAAOH,KAAKpB,MAAMuB,KACxB,OACIE,EAAAnB,EAAAoB,cAAA,WACAD,EAAAnB,EAAAoB,cAAA,gBAAQH,EAAKK,kBA9BeC,aCqBzBe,0LAdX,OAEFnB,EAAAnB,EAAAoB,cAACmB,EAAA,EAAD,KACEpB,EAAAnB,EAAAoB,cAACoB,EAAA,EAAD,KACErB,EAAAnB,EAAAoB,cAACqB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWnD,IACjC0B,EAAAnB,EAAAoB,cAACqB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAWpB,IACtCL,EAAAnB,EAAAoB,cAACqB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,aAAaC,UAAWnB,aAT9BF,cCIEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASZ,MACvB,2DCZNa,IAASC,OAAO/B,EAAAnB,EAAAoB,cAAC+B,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e10f4080.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport Axios from 'axios'\nimport styled from 'styled-components'\n\nconst UserDiv = styled.div`\n\n`\n\nexport default class LandingPage extends Component {\n    state = {\n        users : []\n    }\n\n   async componentDidMount(){\nawait this.fetchUsers()\n    }\n\n fetchUsers = async() => {\nconst response = await Axios.get('/api/users')\nthis.setState({ users: response.data})\nconsole.log(this.state.users)\n}\n    render() {\n\n        const allUsers = this.state.users.map((user, i) => {\n            return (\n                <UserDiv key={i}>\n                    <h1>{user.username}</h1>\n                </UserDiv>\n            )\n        })\n    return (\n        <div>\n            <h1>Hello</h1>\n           <h1> {allUsers} </h1>\n        </div>\n    \n    )\n    }\n}","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\n\nexport default class AllUsers extends Component {\n    render(){\n        return (\n            <h1>Hello as well to you</h1>\n        )\n    }\n}","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport axios from 'axios'\n\nexport default class SingleUser extends Component {\n    state = {\n        user: {},\n        cars: []\n    }\n\n    async componentDidMount(){\n        const userId = this.props.match.params.id\n\n        const user = await this.fetchUser(userId)\n        const cars = await this.fetchCars(userId)\n\n\n        this.setState({ user,cars})\n\n    }\n\n    fetchUser = async(id) => {\nconst response = await axios.get(`/api/users/${id}`)\nthis.setState({user: response.data})\n    }\n\n    fetchCars = async(id) => {\n        const response = await axios.get(`/api/users/${id}`)\n        this.setState({cars: response.data})\n    }\n    render() {\n        const user = this.state.user\n        return (\n            <div>\n            <h1>Hi {user.username}</h1>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'\nimport LandingPage from './components/LandingPage'\nimport AllUsers from './components/AllUsers'\nimport SingleUser from './components/SingleUser'\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n \n    return (\n     \n  <Router>\n    <Switch>\n      <Route exact path='/' component={LandingPage} />\n      <Route exact path='/users' component={AllUsers} />\n      <Route exact path='/users/:id' component={SingleUser} />\n\n    </Switch>\n  </Router>\n    );\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}